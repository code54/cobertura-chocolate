# Cobertura

This repository aims to be a contribution to the Cobertura project.

Our objectives

* tests should be run once. Due to original Cobertura design, users were forced to run instrumentation and tests immediately, and later run tests again to see if something was broken.
* expose more data. Ex.: expose coverage thresholds and coverage data on reports, allow to build custom metrics.
* decouple from Ant and provide a DSL to set parameters, run code instrumentation and provide programatic access to results
* provide means to add new metrics
* provide means to support multiple JVM languages

Do we break compatibility?

We are using other xml export format, and inclusion/exclusion ant-like patterns (ex.: "**/A.class") are not properly handled.
Original xml and html reports were not removed and old ant tasks can still be used.

## Quick example

	Arguments args =
        	         new Arguments().setBaseDirectory(origClassesDir.getAbsolutePath())
                	        .setDataFile("cobertura.ser")
                	        .setDestinationFile(intrumentedCodeDestDir.getAbsolutePath())
                	        .setEncoding("UTF-8");
	
	new Cobertura(args).instrumentCode();
	
	//run tests
	
	cobertura.report().export(new XmlReportFormatStrategy());


## Overview

Instrumented classes will hit ProjectData object when tests are run, collecting coverage data.
Data should be aggregated using an IReportBuilderStrategy implementation. This way we can aggregate data from autogenerated .class files for non-Java JVM languages. Aggregated data is presented in a GenericReport object.
New metrics can be defined implementing ICustomMetric interface.
To present GenericReports data, we can implement IReportFormatStrategy interface.

## Status

* we benefit from git and Maven tools.
* a DSL was created to set parameters and results can be accessed programatically
* code instrumentation, tests and report building phases were decoupled. User just needs to run code instrumentation, then run the tests, and build coverage reports after that.
* project data was abstracted, so that information can be processed and good reports can be built for other JVM languages
* an interface for new metrics was created. Implementations should be loaded by reflection.
* xml, threshold violations and html reporting strategies were implemented

## Todos

* review parameters Cobertura accepts. See how to deal with classes inclusion/exclusion when receiving Ant like patterns (ex.: "**/A.class")
* test html report strategy
* refactor html report strategy using a library like http://code.google.com/p/jatl/
* allow to assign a name to a project (currently a hash is calculated, based on project files)
* create a Maven plugin
* make Jenkins plugin leverage this code
* see how to handle war/jar/ear files instrumentation
* create IReportBuilderStrategies for other JVM languages

Contributions are welcome!


# COPYRIGHT

See the included file "COPYRIGHT"


# LICENSE

Cobertura is free software.  Most of it is licensed under the GNU
GPL, and you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option)
any later version.  Please review the file COPYING included in this
distribution for further details.

Parts of Cobertura are licensed under the Apache Software License,
Version 1.1.


# WARRANTY

Cobertura is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.
